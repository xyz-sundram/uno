// Includes the Servo library
#include <Servo.h> 

// Defines Trig and Echo pins of the Ultrasonic Sensor
const int trigPin = 10;
const int echoPin = 11;
const int buzzerPin = 9; // Define the buzzer pin
const int sensorLightPin = 8; // Define the pin for the sensor-activated light
const int constantLightPin = 7; // Define the pin for the constantly lit light

// Variables for the duration and the distance
long duration;
int distance;

Servo myServo; // Creates a servo object for controlling the servo motor

bool isBlinking = false;
unsigned long previousMillis = 0;
const long interval = 500; // Blinking interval in milliseconds

void setup() {
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  pinMode(buzzerPin, OUTPUT); // Sets the buzzer pin as an Output
  pinMode(sensorLightPin, OUTPUT); // Sets the sensor light pin as an Output
  pinMode(constantLightPin, OUTPUT); // Sets the constant light pin as an Output
  Serial.begin(9600);
  myServo.attach(12); // Defines on which pin is the servo motor attached
  
  // Ensure the constant light is initially ON
  digitalWrite(constantLightPin, HIGH);
}

void loop() {
  // Rotates the servo motor from 15 to 165 degrees
  for (int i = 15; i <= 165; i++) {  
    myServo.write(i);
    delay(30);
    distance = calculateDistance(); // Calls a function for calculating the distance measured by the Ultrasonic sensor for each degree
    
    Serial.print(i); // Sends the current degree into the Serial Port
    Serial.print(","); // Sends additional character right next to the previous value needed later in the Processing IDE for indexing
    Serial.print(distance); // Sends the distance value into the Serial Port
    Serial.print("."); // Sends additional character right next to the previous value needed later in the Processing IDE for indexing

    // Check if an object is detected within a certain range (adjust as needed)
    if (distance < 50 && distance > 0) {
      beepBuzzer(); // Activate the buzzer
      digitalWrite(sensorLightPin, HIGH); // Turn on the sensor-activated light
      digitalWrite(constantLightPin, LOW); // Turn off the constant light
      startBlinking(); // Start blinking the sensor light
    } else {
      noTone(buzzerPin); // Turn off the buzzer if no object is detected within the specified range
      digitalWrite(sensorLightPin, LOW); // Turn off the sensor-activated light
      digitalWrite(constantLightPin, HIGH); // Turn on the constant light
      stopBlinking(); // Stop blinking the sensor light
    }
  }
  
  // Repeats the previous lines from 165 to 15 degrees
  for (int i = 165; i > 15; i--) {  
    myServo.write(i);
    delay(30);
    distance = calculateDistance();
    Serial.print(i);
    Serial.print(",");
    Serial.print(distance);
    Serial.print(".");

    // Check if an object is detected within a certain range (adjust as needed)
    if (distance < 50 && distance > 0) {
      beepBuzzer(); // Activate the buzzer
      digitalWrite(sensorLightPin, HIGH); // Turn on the sensor-activated light
      digitalWrite(constantLightPin, LOW); // Turn off the constant light
      startBlinking(); // Start blinking the sensor light
    } else {
      noTone(buzzerPin); // Turn off the buzzer if no object is detected within the specified range
      digitalWrite(sensorLightPin, LOW); // Turn off the sensor-activated light
      digitalWrite(constantLightPin, HIGH); // Turn on the constant light
      stopBlinking(); // Stop blinking the sensor light
    }
  }
}

// Function for calculating the distance measured by the Ultrasonic sensor
int calculateDistance() { 
  digitalWrite(trigPin, LOW); 
  delayMicroseconds(2);
  
  // Sets the trigPin on HIGH state for 10 microseconds
  digitalWrite(trigPin, HIGH); 
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  duration = pulseIn(echoPin, HIGH); // Reads the echoPin, returns the sound wave travel time in microseconds
  distance = duration * 0.034 / 2;
  return distance;
}

// Function to make the buzzer beep
void beepBuzzer() {
  tone(buzzerPin, 1000); // You can change the frequency as needed
  delay(100); // Adjust the duration of the beep as needed
}

// Function to start blinking the sensor light
void startBlinking() {
  isBlinking = true;
}

// Function to stop blinking the sensor light
void stopBlinking() {
  isBlinking = false;
  digitalWrite(sensorLightPin, LOW); // Ensure the light is turned off when blinking stops
}

void manageBlinking() {
  unsigned long currentMillis = millis();

  if (isBlinking) {
    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;
      
      // Toggle the state of the sensor light
      if (digitalRead(sensorLightPin) == HIGH) {
        digitalWrite(sensorLightPin, LOW);
      } else {
        digitalWrite(sensorLightPin, HIGH);
      }
    }
  }
}
